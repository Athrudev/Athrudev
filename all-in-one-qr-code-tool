{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyP0NbzBpXXZeHtlWhvDJqly",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Athrudev/Athrudev/blob/main/all-in-one-qr-code-tool\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**'segno' library is faster and it has many customization options**"
      ],
      "metadata": {
        "id": "_HTT8CbUvDBx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install segno\n",
        "!pip install pypng\n",
        "!pip install pillow qrcode-artistic\n",
        "!pip install segno pyzbar pillow cryptography"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n8BdKH6ptKSI",
        "outputId": "07554254-6fef-4cc2-8f88-b12f0774f185"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: segno in /usr/local/lib/python3.10/dist-packages (1.6.1)\n",
            "Requirement already satisfied: pypng in /usr/local/lib/python3.10/dist-packages (0.20220715.0)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (9.4.0)\n",
            "Requirement already satisfied: qrcode-artistic in /usr/local/lib/python3.10/dist-packages (3.0.2)\n",
            "Requirement already satisfied: segno>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from qrcode-artistic) (1.6.1)\n",
            "Requirement already satisfied: segno in /usr/local/lib/python3.10/dist-packages (1.6.1)\n",
            "Collecting pyzbar\n",
            "  Downloading pyzbar-0.1.9-py2.py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (9.4.0)\n",
            "Requirement already satisfied: cryptography in /usr/local/lib/python3.10/dist-packages (42.0.8)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography) (1.17.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography) (2.22)\n",
            "Downloading pyzbar-0.1.9-py2.py3-none-any.whl (32 kB)\n",
            "Installing collected packages: pyzbar\n",
            "Successfully installed pyzbar-0.1.9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NEuIbrPosXPE",
        "outputId": "0fd5f502-65e9-4251-d4cf-36d309a63614"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Generate QR?(y/n): y\n",
            "MENU\n",
            "1. default qr code\n",
            "2. Customized QR code\n",
            "3. Animated QR code\n",
            "Enter a choice: 3\n",
            "Enter the info that you want to generate QR code: ath\n",
            "Select file name: anime101\n",
            "Select size for QR code (8 is default): 8\n",
            "\n",
            "Background color options:\n",
            "1. white\n",
            "2. lightblue\n",
            "3. lightyellow\n",
            "4. lightgreen\n",
            "5. lightpink\n",
            "Select Background color (enter the number): 3\n",
            "\n",
            "QR color color options:\n",
            "1. black\n",
            "2. darkblue\n",
            "3. darkgreen\n",
            "4. darkred\n",
            "5. purple\n",
            "Select QR color color (enter the number): 4\n",
            "\n",
            "Animated background options:\n",
            "1. Animated Background 1\n",
            "2. Animated Background 2\n",
            "3. Animated Background 3\n",
            "4. Animated Background 4\n",
            "5. Animated Background 5\n",
            "Select animated background (enter the number): \n",
            "Invalid input. Using default animated background.\n",
            "Animated QR code generated successfully!\n",
            "Generate QR?(y/n): n\n",
            "Thank you for using our tool,Have a great day...!\n"
          ]
        }
      ],
      "source": [
        "import segno\n",
        "from urllib.request import urlopen\n",
        "from pyzbar.pyzbar import decode\n",
        "from PIL import Image\n",
        "from cryptography.fernet import Fernet\n",
        "import io\n",
        "default_gif = \"https://media.giphy.com/media/LpwBqCorPvZC0/giphy.gif\"\n",
        "default_bg='white'\n",
        "default_qr='black'\n",
        "\n",
        "\n",
        "light_colors = {\n",
        "        1: \"white\",\n",
        "        2: \"lightblue\",\n",
        "        3: \"lightyellow\",\n",
        "        4: \"lightgreen\",\n",
        "        5: \"lightpink\"\n",
        "    }\n",
        "\n",
        "dark_colors = {\n",
        "        1: \"black\",\n",
        "        2: \"darkblue\",\n",
        "        3: \"darkgreen\",\n",
        "        4: \"darkred\",\n",
        "        5: \"purple\"\n",
        "    }\n",
        "\n",
        "gif_options = {\n",
        "    1: \"https://example.com/animated_background1.gif\",\n",
        "    2: \"https://example.com/animated_background2.gif\",\n",
        "    3: \"https://media.giphy.com/media/LpwBqCorPvZC0/giphy.gif\",\n",
        "    4: \"https://example.com/animated_background4.gif\",\n",
        "    5: \"https://example.com/animated_background5.gif\"\n",
        "}\n",
        "\n",
        "\n",
        "\n",
        "def get_info():\n",
        "    return input('üñäÔ∏è  Please enter the information for your QR code: ')\n",
        "\n",
        "def get_name():\n",
        "    return input('üìÅ Choose a file name for your QR code: ')\n",
        "\n",
        "def get_color(array, name, default):\n",
        "    print(f'\\nüé® {name} color options:')\n",
        "    for key, value in array.items():\n",
        "        print(f'   {key}. {value}')\n",
        "    try:\n",
        "        choice = int(input(f'Select {name.lower()} color (enter the number): '))\n",
        "        color = array.get(choice, default)\n",
        "    except ValueError:\n",
        "        print(f\"‚ö†Ô∏è  Invalid input. Using default color: {default}\")\n",
        "        color = default\n",
        "    return color\n",
        "\n",
        "def get_gif(array, default):\n",
        "    print(\"\\nüé≠ Animated background options:\")\n",
        "    for key, value in array.items():\n",
        "        print(f'   {key}. Animated Background {key}')\n",
        "    try:\n",
        "        choice = int(input('Select animated background (enter the number): '))\n",
        "        gif_url = array.get(choice, default)\n",
        "    except ValueError:\n",
        "        print(f\"‚ö†Ô∏è  Invalid input. Using default animated background.\")\n",
        "        gif_url = default\n",
        "    return gif_url\n",
        "\n",
        "\n",
        "\n",
        "def default_qr():\n",
        "    print(\"\\nüìå Creating a default QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "    qrcode = segno.make_qr(info)\n",
        "    qrcode.save(f\"{name}.png\", scale=8, border=4)\n",
        "    print('‚úÖ QR code generated successfully!')\n",
        "\n",
        "def customized_qr():\n",
        "    print(\"\\nüé® Creating a customized QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "    qr_size = int(input('üîç Select size for QR code (8 is default): '))\n",
        "    border_size = int(input('üñºÔ∏è  Select border size of the QR code (4 is default): '))\n",
        "\n",
        "    bg_color = get_color(light_colors, 'Background', default_bg)\n",
        "    qr_color = get_color(dark_colors, 'QR color', default_qr)\n",
        "\n",
        "    qrcode = segno.make_qr(info)\n",
        "    qrcode.save(f\"{name}.png\",\n",
        "                scale=qr_size,\n",
        "                border=border_size,\n",
        "                light=bg_color,\n",
        "                dark=qr_color)\n",
        "    print('‚úÖ Customized QR code generated successfully!')\n",
        "\n",
        "def animated_qr():\n",
        "    print(\"\\nüé¨ Creating an animated QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "    qr_size = int(input('üîç Select size for QR code (8 is default): '))\n",
        "    bg_color = get_color(light_colors, 'Background', default_bg)\n",
        "    qr_color = get_color(dark_colors, 'QR color', default_qr)\n",
        "\n",
        "    gif_url = get_gif(gif_options, default_gif)\n",
        "\n",
        "    url = urlopen(gif_url)\n",
        "    qrcode = segno.make_qr(info)\n",
        "\n",
        "    qrcode.to_artistic(background=url,\n",
        "                       target=f\"{name}.gif\",\n",
        "                       scale=qr_size,\n",
        "                       light=bg_color,\n",
        "                       dark=qr_color)\n",
        "    print('‚úÖ Animated QR code generated successfully!')\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def main():\n",
        "    print(\"üåü Welcome to the QR Code Generator! üåü\")\n",
        "    while True:\n",
        "        choice = input('\\nüîÑ Generate a QR code? (y/n): ').lower()\n",
        "        if choice == 'y':\n",
        "            print(\"\\nüìã MENU\")\n",
        "            print('1. üìä Default QR code')\n",
        "            print('2. üé® Customized QR code')\n",
        "            print('3. üé¨ Animated QR code')\n",
        "            print('4. üö™ Exit')\n",
        "\n",
        "            try:\n",
        "                user = int(input('Enter your choice (1-4): '))\n",
        "                if user == 1:\n",
        "                    default_qr()\n",
        "                elif user == 2:\n",
        "                    customized_qr()\n",
        "                elif user == 3:\n",
        "                    animated_qr()\n",
        "                elif user == 4:\n",
        "                    print(\"üëã Thank you for using our QR Code Generator. Have a great day!\")\n",
        "                    break\n",
        "                else:\n",
        "                    print('‚ùå Invalid choice. Please select a number between 1 and 4.')\n",
        "            except ValueError:\n",
        "                print('‚ùå Invalid input. Please enter a number.')\n",
        "        else:\n",
        "            print(\"üëã Thank you for using our QR Code Generator. Have a great day!\")\n",
        "            break\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: create a one dictionary with diffrent gif url's and their index no,i want the real url's\n",
        "!pip install segno\n",
        "!pip install pypng\n",
        "!pip install pillow qrcode-artistic\n",
        "!pip install segno pyzbar pillow cryptography\n",
        "\n",
        "import segno\n",
        "from urllib.request import urlopen\n",
        "from pyzbar.pyzbar import decode\n",
        "from PIL import Image\n",
        "from cryptography.fernet import Fernet\n",
        "import io\n",
        "\n",
        "# **'segno' library is faster and it has many customization options**\n",
        "\n",
        "\n",
        "default_gif = \"https://media.giphy.com/media/LpwBqCorPvZC0/giphy.gif\"\n",
        "default_bg = 'white'\n",
        "default_qr = 'black'\n",
        "\n",
        "\n",
        "light_colors = {\n",
        "        1: \"white\",\n",
        "        2: \"lightblue\",\n",
        "        3: \"lightyellow\",\n",
        "        4: \"lightgreen\",\n",
        "        5: \"lightpink\"\n",
        "    }\n",
        "\n",
        "dark_colors = {\n",
        "        1: \"black\",\n",
        "        2: \"darkblue\",\n",
        "        3: \"darkgreen\",\n",
        "        4: \"darkred\",\n",
        "        5: \"purple\"\n",
        "    }\n",
        "\n",
        "\n",
        "gif_options = {\n",
        "    1: \"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\",  # Real URL 1\n",
        "    2: \"https://media.giphy.com/media/hvS1eKlR75hMr0lYzJ/giphy.gif\",  # Real URL 2\n",
        "    3: \"https://media.giphy.com/media/LpwBqCorPvZC0/giphy.gif\",  # Real URL 3\n",
        "    4: \"https://media.giphy.com/media/du3J3cXyzhj75IOgvA/giphy.gif\",  # Real URL 4\n",
        "    5: \"https://media.giphy.com/media/xT5LMHxhOfscxPfIfm/giphy.gif\"  # Real URL 5\n",
        "}\n",
        "\n",
        "\n",
        "\n",
        "def get_info():\n",
        "    return input('üñäÔ∏è  Please enter the information for your QR code: ')\n",
        "\n",
        "def get_name():\n",
        "    return input('üìÅ Choose a file name for your QR code: ')\n",
        "\n",
        "def get_color(array, name, default):\n",
        "    print(f'\\nüé® {name} color options:')\n",
        "    for key, value in array.items():\n",
        "        print(f'   {key}. {value}')\n",
        "    try:\n",
        "        choice = int(input(f'Select {name.lower()} color (enter the number): '))\n",
        "        color = array.get(choice, default)\n",
        "    except ValueError:\n",
        "        print(f\"‚ö†Ô∏è  Invalid input. Using default color: {default}\")\n",
        "        color = default\n",
        "    return color\n",
        "\n",
        "def get_gif(array, default):\n",
        "    print(\"\\nüé≠ Animated background options:\")\n",
        "    print(\"   0. Add custom GIF link\")\n",
        "    for key, value in array.items():\n",
        "        print(f\"   {key}. Animated Background {key}\")\n",
        "    try:\n",
        "        choice = int(input('Select animated background (enter the number): '))\n",
        "        if choice == 0:\n",
        "            custom_link = input(\"Enter your custom GIF URL: \")\n",
        "            return custom_link\n",
        "        gif_url = array.get(choice, default)\n",
        "    except ValueError:\n",
        "        print(f\"‚ö†Ô∏è  Invalid input. Using default animated background.\")\n",
        "        gif_url = default\n",
        "    return gif_url\n",
        "\n",
        "\n",
        "def encrypt_data(data):\n",
        "    key = Fernet.generate_key()\n",
        "    f = Fernet(key)\n",
        "    encrypted_data = f.encrypt(data.encode())\n",
        "    return encrypted_data, key\n",
        "\n",
        "def decrypt_data(encrypted_data, key):\n",
        "    f = Fernet(key)\n",
        "    decrypted_data = f.decrypt(encrypted_data).decode()\n",
        "    return decrypted_data\n",
        "\n",
        "def insert_logo(qr_image, logo_path, logo_size):\n",
        "    logo = Image.open(logo_path)\n",
        "    logo = logo.resize(logo_size)\n",
        "    pos = ((qr_image.size[0] - logo.size[0]) // 2,\n",
        "           (qr_image.size[1] - logo.size[1]) // 2)\n",
        "    qr_image.paste(logo, pos, logo.convert('RGBA'))\n",
        "    return qr_image\n",
        "\n",
        "\n",
        "def read_qr_code():\n",
        "    image_path = input(\"üñºÔ∏è  Enter the path to the QR code image: \")\n",
        "    try:\n",
        "        image = Image.open(image_path)\n",
        "        decoded = decode(image)\n",
        "        if decoded:\n",
        "            print(f\"‚úÖ Decoded QR code: {decoded[0].data.decode('utf-8')}\")\n",
        "            decrypt_choice = input(\"üîê Is this data encrypted? (y/n): \").lower()\n",
        "            if decrypt_choice == 'y':\n",
        "                key = input(\"üîë Enter the decryption key: \").encode()\n",
        "                try:\n",
        "                    decrypted_data = decrypt_data(decoded[0].data, key)\n",
        "                    print(f\"üîì Decrypted data: {decrypted_data}\")\n",
        "                except Exception as e:\n",
        "                    print(f\"‚ùå Decryption failed: {str(e)}\")\n",
        "        else:\n",
        "            print(\"‚ùå No QR code found in the image.\")\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Error reading QR code: {str(e)}\")\n",
        "\n",
        "\n",
        "def default_qr():\n",
        "    print(\"\\nüìå Creating a default QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "\n",
        "    encrypt_choice = input(\"üîê Encrypt the data? (y/n): \").lower()\n",
        "    if encrypt_choice == 'y':\n",
        "        info, key = encrypt_data(info)\n",
        "        print(f\"üîë Decryption key: {key.decode()}\")  # Store this securely!\n",
        "\n",
        "    qrcode = segno.make_qr(info)\n",
        "    qrcode.save(f\"{name}.png\", scale=8, border=4)\n",
        "\n",
        "    logo_choice = input(\"üñºÔ∏è  Add a logo to the QR code? (y/n): \").lower()\n",
        "    if logo_choice == 'y':\n",
        "        logo_path = input(\"Enter path to logo image: \")\n",
        "        logo_size = (50, 50)  # Adjust size as needed\n",
        "        qr_image = Image.open(f\"{name}.png\")\n",
        "        qr_with_logo = insert_logo(qr_image, logo_path, logo_size)\n",
        "        qr_with_logo.save(f\"{name}_with_logo.png\")\n",
        "        print('‚úÖ QR code with logo generated successfully!')\n",
        "    else:\n",
        "        print('‚úÖ QR code generated successfully!')\n",
        "\n",
        "def customized_qr():\n",
        "    print(\"\\nüé® Creating a customized QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "    qr_size = int(input('üîç Select size for QR code (8 is default): '))\n",
        "    border_size = int(input('üñºÔ∏è  Select border size of the QR code (4 is default): '))\n",
        "\n",
        "    bg_color = get_color(light_colors, 'Background', default_bg)\n",
        "    qr_color = get_color(dark_colors, 'QR color', default_qr)\n",
        "\n",
        "    encrypt_choice = input(\"üîê Encrypt the data? (y/n): \").lower()\n",
        "    if encrypt_choice == 'y':\n",
        "        info, key = encrypt_data(info)\n",
        "        print(f\"üîë Decryption key: {key.decode()}\")  # Store this securely!\n",
        "\n",
        "    qrcode = segno.make_qr(info)\n",
        "    qrcode.save(f\"{name}.png\",\n",
        "                scale=qr_size,\n",
        "                border=border_size,\n",
        "                light=bg_color,\n",
        "                dark=qr_color)\n",
        "\n",
        "    logo_choice = input(\"üñºÔ∏è  Add a logo to the QR code? (y/n): \").lower()\n",
        "    if logo_choice == 'y':\n",
        "        logo_path = input(\"Enter path to logo image: \")\n",
        "        logo_size = (50, 50)  # Adjust size as needed\n",
        "        qr_image = Image.open(f\"{name}.png\")\n",
        "        qr_with_logo = insert_logo(qr_image, logo_path, logo_size)\n",
        "        qr_with_logo.save(f\"{name}_with_logo.png\")\n",
        "        print('‚úÖ Customized QR code with logo generated successfully!')\n",
        "    else:\n",
        "        print('‚úÖ Customized QR code generated successfully!')\n",
        "\n",
        "def animated_qr():\n",
        "    print(\"\\nüé¨ Creating an animated QR code...\")\n",
        "    info = get_info()\n",
        "    name = get_name()\n",
        "    qr_size = int(input('üîç Select size for QR code (8 is default): '))\n",
        "    bg_color = get_color(light_colors, 'Background', default_bg)\n",
        "    qr_color = get_color(dark_colors, 'QR color', default_qr)\n",
        "\n",
        "    print(\"\\nüñºÔ∏è  Choose GIF background:\")\n",
        "    print(\"1. Select from default options\")\n",
        "    print(\"2. Add custom GIF link\")\n",
        "\n",
        "    gif_choice = input(\"Enter your choice (1 or 2): \")\n",
        "\n",
        "    if gif_choice == \"1\":\n",
        "        gif_url = get_gif(gif_options, default_gif)\n",
        "    elif gif_choice == \"2\":\n",
        "        gif_url = input(\"Enter your custom GIF URL: \")\n",
        "    else:\n",
        "        print(\"‚ö†Ô∏è  Invalid choice. Using default GIF.\")\n",
        "        gif_url = default_gif\n",
        "\n",
        "    encrypt_choice = input(\"üîê Encrypt the data? (y/n): \").lower()\n",
        "    if encrypt_choice == 'y':\n",
        "        info, key = encrypt_data(info)\n",
        "        print(f\"üîë Decryption key: {key.decode()}\")  # Store this securely!\n",
        "\n",
        "    try:\n",
        "        url = urlopen(gif_url)\n",
        "        qrcode = segno.make_qr(info)\n",
        "\n",
        "        qrcode.to_artistic(background=url,\n",
        "                           target=f\"{name}.gif\",\n",
        "                           scale=qr_size,\n",
        "                           light=bg_color,\n",
        "                           dark=qr_color)\n",
        "        print('‚úÖ Animated QR code generated successfully!')\n",
        "    except Exception as e:\n",
        "        print(f\"‚ùå Error generating QR code: {str(e)}\")\n",
        "        print(\"Please check your GIF URL and try again.\")\n",
        "\n",
        "def main():\n",
        "    print(\"üåü Welcome to the QR Code Generator! üåü\")\n",
        "    while True:\n",
        "        print(\"\\nüìã MENU\")\n",
        "        print('1. üìä Default QR code')\n",
        "        print('2. üé® Customized QR code')\n",
        "        print('3. üé¨ Animated QR code')\n",
        "        print('4. üì∑ Read QR code')\n",
        "        print('5. üö™ Exit')\n",
        "\n",
        "        try:\n",
        "            user = int(input('Enter your choice (1-5): '))\n",
        "            if user == 1:\n",
        "                default_qr()\n",
        "            elif user == 2:\n",
        "                customized_qr()\n",
        "            elif user == 3:\n",
        "                animated_qr()\n",
        "            elif user == 4:\n",
        "                read_qr_code()\n",
        "            elif user == 5:\n",
        "                print(\"üëã Thank you for using our QR Code Generator. Have a great day!\")\n",
        "                break\n",
        "            else:\n",
        "                print('‚ùå Invalid choice. Please select a number between 1 and 5.')\n",
        "        except ValueError:\n",
        "            print('‚ùå Invalid input. Please enter a number.')\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5V4Xo4C1v4N-",
        "outputId": "e3afeadd-f7f1-47e6-de84-f9b2e90a6285"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: segno in /usr/local/lib/python3.10/dist-packages (1.6.1)\n",
            "Requirement already satisfied: pypng in /usr/local/lib/python3.10/dist-packages (0.20220715.0)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (9.4.0)\n",
            "Requirement already satisfied: qrcode-artistic in /usr/local/lib/python3.10/dist-packages (3.0.2)\n",
            "Requirement already satisfied: segno>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from qrcode-artistic) (1.6.1)\n",
            "Requirement already satisfied: segno in /usr/local/lib/python3.10/dist-packages (1.6.1)\n",
            "Requirement already satisfied: pyzbar in /usr/local/lib/python3.10/dist-packages (0.1.9)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (9.4.0)\n",
            "Requirement already satisfied: cryptography in /usr/local/lib/python3.10/dist-packages (42.0.8)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.10/dist-packages (from cryptography) (1.17.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.12->cryptography) (2.22)\n",
            "üåü Welcome to the QR Code Generator! üåü\n",
            "\n",
            "üìã MENU\n",
            "1. üìä Default QR code\n",
            "2. üé® Customized QR code\n",
            "3. üé¨ Animated QR code\n",
            "4. üì∑ Read QR code\n",
            "5. üö™ Exit\n",
            "Enter your choice (1-5): 2\n",
            "\n",
            "üé® Creating a customized QR code...\n",
            "üñäÔ∏è  Please enter the information for your QR code: https://unsplash.com/photos/woman-sitting-on-gray-concrete-platform-during-daytime-6PROVhY2Yq4\n",
            "üìÅ Choose a file name for your QR code: firl101\n",
            "üîç Select size for QR code (8 is default): 10\n",
            "üñºÔ∏è  Select border size of the QR code (4 is default): 2\n",
            "\n",
            "üé® Background color options:\n",
            "   1. white\n",
            "   2. lightblue\n",
            "   3. lightyellow\n",
            "   4. lightgreen\n",
            "   5. lightpink\n",
            "Select background color (enter the number): 5\n",
            "\n",
            "üé® QR color color options:\n",
            "   1. black\n",
            "   2. darkblue\n",
            "   3. darkgreen\n",
            "   4. darkred\n",
            "   5. purple\n",
            "Select qr color color (enter the number): 4\n",
            "üîê Encrypt the data? (y/n): y\n",
            "üîë Decryption key: PMlaurFk8wsTt0Ma37Mm37h7Xbo6t2TbKuhcOXJ61k0=\n",
            "üñºÔ∏è  Add a logo to the QR code? (y/n): n\n",
            "‚úÖ Customized QR code generated successfully!\n",
            "\n",
            "üìã MENU\n",
            "1. üìä Default QR code\n",
            "2. üé® Customized QR code\n",
            "3. üé¨ Animated QR code\n",
            "4. üì∑ Read QR code\n",
            "5. üö™ Exit\n",
            "Enter your choice (1-5): 5\n",
            "üëã Thank you for using our QR Code Generator. Have a great day!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Z67bW7C7O3wK"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}